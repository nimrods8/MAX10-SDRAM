
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
module DE10_LITE_SDRAM_RTL_Test(


	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,					
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,


	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire  [15:0]  writedata;
wire  [15:0]  readdata;
wire          write;
wire          read;
wire          clk_test;

  wire clk0; // 143.333 MHZ
  wire clk1; // 50 MHZ user side, trying with 100Mhz 
  wire clk2; // 143.333 MHZ -3ns
  wire [1:0] dram_bank;
  wire 	     dll_locked;

pll133_2 pll_inst
 (
  .areset(~KEY[0]),
  .inclk0(MAX10_CLK1_50),
  .c0(clk0),
  .c1(clk1),
  .c2(clk2),
  .locked (dll_locked)
  );


  wire [24:0] addr_i;
  wire [31:0] dat_i;
  wire [31:0] dat_o;
  wire 	      we_i;
  wire 	      ack_o;
  wire 	      stb_i;
  wire 	      cyc_i;
  wire        rst_i;

  reg [31:0]  counter;

  assign LEDR[0] = dll_locked;
  assign /*{DRAM_BA_1, DRAM_BA_0}*/DRAM_BA = dram_bank;
  assign rst_i = ~KEY[1];



  sdram_controller #( .BURST_LENGTH(0))
		 sdram_controller_inst 
		 (

		  .clk_i(clk0),
		  .dram_clk_i(clk2),
		  .rst_i(/*rst_i*/0),
		  .dll_locked(dll_locked),
		  // all sdram signals
		  .dram_addr(DRAM_ADDR),
		  .dram_bank(dram_bank),
		  .dram_cas_n(DRAM_CAS_N),
		  .dram_cke(DRAM_CKE),
		  .dram_clk(DRAM_CLK),
		  .dram_cs_n(DRAM_CS_N),
		  .dram_dq(DRAM_DQ),
		  .dram_ldqm(DRAM_LDQM),
		  .dram_udqm(DRAM_UDQM),
		  .dram_ras_n(DRAM_RAS_N),
		  .dram_we_n(DRAM_WE_N),
		  .init_done(init_done),
		  // wishbone bus
		  .addr_i(addr_i),
		  .dat_i(dat_i),
		  .dat_o(dat_o),
		  .we_i(we_i),
		  .ack_o(ack_o),
		  .stb_i(stb_i),
		  .cyc_i(cyc_i)
	  );


  sdram_rw rw_inst
    (
     .clk_i(clk1),
     .rst_i(rst_i),
     .addr_i(addr_i),
     .dat_i(dat_i),
     .dat_o(dat_o),
     .we_i(we_i),
     .ack_o(ack_o),
     .stb_i(stb_i),
     .cyc_i(cyc_i),
	  .init_done(init_done),
     .red_led(LEDR[1]),
     .green_led(LEDR[2]),
	  .hex0(HEX0),
	  .hex1(HEX1),
	  .hex2(HEX2),
	  .hex3(HEX3),
	  .hex4(HEX4),
	  .hex5(HEX5),
	  .switches(SW)
     );

assign LEDR[4] = ~KEY[0];
assign LEDR[5] = ~KEY[1];

//SEG7_LUT seg2 ( HEX2, SW[3:0]);
//SEG7_LUT seg3 ( HEX3, { wr_enable, rst_n_pad_i, ctrl_busy, rd_enable });  

	
endmodule
